apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

configurations {
    deployerJars
    xjc
}

repositories {
    mavenCentral()
    mavenRepo name: 'Metabroadcast', url: 'http://mvn.metabroadcast.com/all'
}

dependencies {
    
    compile 'com.google.guava:guava:15.0-rc1'
    compile 'org.hamcrest:hamcrest-core:1.3'
    compile 'joda-time:joda-time:2.3'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'com.google.http-client:google-http-client:1.16.0-rc'

    testCompile('org.testng:testng:6.8.5') {
        exclude group: 'junit'
    }
    testCompile 'junit:junit:4.11'
    testCompile('org.mockito:mockito-core:1.9.5') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.slf4j:slf4j-log4j12:1.7.5'
    
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.4-1'
    
    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
}

def schemaTargetDir = new File("${project.buildDir}/generated-sources")

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', schemaTargetDir.path]
        }
    }
}

compileJava.doFirst {
    schemaTargetDir.mkdirs()
    ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)
    ant.xjc(destdir: schemaTargetDir, extension: 'true') {
        schema(dir: new File('src/main/resources'), includes:'*.xsd')
    }
}

sourceCompatibility = 1.6
group 'com.metabroadcast.atlas.glycerin'
version = '0.1.0'
jar {
    from sourceSets.main.output.classesDir
    baseName 'glycerin'
    manifest {
        attributes 'Implementation-Title': 'Glycerin', 'Implementation-Version': version
    }
}

test {
    useTestNG()
    testLogging {
        events "passed", "failed", "skipped"
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

//Get maven repo credentials
def getMavenSettingsCredentials = {
    String userHome = System.getProperty( "user.home" );
    File mavenSettings = new File(userHome, ".m2/settings.xml")
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output."servers"."server"
}

def getCredentials = {
    def entries = getMavenSettingsCredentials()
    for (entry in entries) {
        if ( entry."id".text() == "metabroadcast-mvn" ) {
            return [username: entry.username.text(), password: entry.password.text()]
    }
  }
}

uploadArchives {
    def creds = getCredentials()
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "dav:http://mvn.metabroadcast.com:80/public-releases-local") {
            authentication(userName: creds["username"], password: creds["password"])
        }
    }
}